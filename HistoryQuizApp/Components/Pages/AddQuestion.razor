@page "/add-questions"
@using HistoryQuizApp.Data
@rendermode InteractiveServer
@inject QuizService QuizService
@inject NavigationManager NavigationManager
@implements IDisposable

<h3>Add Questions</h3>

@if (availableQuizzes != null && availableQuizzes.Any())
{
    <div>
        <label for="quizSelect">Select Quiz:</label>
        <select id="quizSelect" @onchange="OnQuizSelected">
            @foreach (var quiz in availableQuizzes)
            {
                <option value="@quiz.Id">@quiz.Title</option>
            }
        </select>
    </div>

    @if (selectedQuiz != null)
    {
        <div>
            <h4>Adding questions to @selectedQuiz.Title</h4>
            <EditForm Model="@newQuestion" OnValidSubmit="AddQueston">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label for="questionText">Question:</label>
                    <InputText id="questionText" class="form-control" @bind-Value="newQuestion.Text" />
                </div>

                <div>
                    <div>
                        <label for="option_1">Option 1:</label>
                        <InputText id="option_1" class="form-control" @bind-Value="tempOptions[0]" />
                        <InputCheckbox id="correct_1" @bind-Value="newQuestion.CorrectAnswers[0]" />
                        <label for="correct_1">Correct</label>
                    </div>

                    <div>
                        <label for="option_2">Option 2:</label>
                        <InputText id="option_2" class="form-control" @bind-Value="tempOptions[1]" />
                        <InputCheckbox id="correct_2" @bind-Value="newQuestion.CorrectAnswers[1]" />
                        <label for="correct_2">Correct</label>
                    </div>

                    <div>
                        <label for="option_3">Option 3:</label>
                        <InputText id="option_3" class="form-control" @bind-Value="tempOptions[2]" />
                        <InputCheckbox id="correct_3" @bind-Value="newQuestion.CorrectAnswers[2]" />
                        <label for="correct_3">Correct</label>
                    </div>

                    <div>
                        <label for="option_4">Option 4:</label>
                        <InputText id="option_4" class="form-control" @bind-Value="tempOptions[3]" />
                        <InputCheckbox id="correct_4" @bind-Value="newQuestion.CorrectAnswers[3]" />
                        <label for="correct_4">Correct</label>
                    </div>
                </div>

                <div>
                    <label for="difficultyLevel">Difficulty Level:</label>
                    <select id="difficultyLevel" class="form-control" @bind="newQuestion.DifficultyLevel">
                        <option value="">Select Difficulty</option>
                        <option value="Easy">Easy</option>
                        <option value="Medium">Medium</option>
                        <option value="Hard">Hard</option>
                    </select>
                </div>

                <button type="submit" class="btn btn-primary">Add Question</button>
                <button @onclick="NavigateToHome" class="btn btn-secondary">Cancel</button>
                <button @onclick="NavigateToAuth" class="btn btn-secondary">Go Back to Dashboard</button>
            </EditForm>
        </div>
    }
    else
    {
        <p>Please select a quiz to add questions.</p>
    }
}
else
{
    <p>Loading quizzes...</p>
}

@code {
    private List<HistoryQuizApp.Data.Quiz> availableQuizzes;
    private HistoryQuizApp.Data.Quiz selectedQuiz;
    private Question newQuestion = new Question
        {
            Options = new List<string> { "", "", "", "" },
            CorrectAnswers = new List<bool> { false, false, false, false }
        };
    private List<string> tempOptions = new List<string> { "", "", "", "" };

    protected override async Task OnInitializedAsync()
    {
        availableQuizzes = await QuizService.GetAvailableQuizzesAsync();
    }

    private async Task OnQuizSelected(ChangeEventArgs e)
    {
        var quizId = int.Parse(e.Value.ToString());
        selectedQuiz = await QuizService.GetQuizByIdAsync(quizId);
    }

    private async Task AddQueston()
    {
        newQuestion.Options = tempOptions.Select(opt => opt?.Trim()).ToList();

        if (selectedQuiz != null && newQuestion.Options.Count == 4 && newQuestion.CorrectAnswers.Count == 4)
        {
            await QuizService.AddQuestionToQuizAsync(selectedQuiz.Id, newQuestion);
            newQuestion = new Question
                {
                    Options = new List<string> { "", "", "", "" },
                    CorrectAnswers = new List<bool> { false, false, false, false }
                };
            tempOptions = new List<string> { "", "", "", "" };
        }
        else
        {
            // Handle validation error: must have exactly 4 options and corresponding correct answers
        }
    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/add-questions");
    }
    private void NavigateToAuth()
    {
        NavigationManager.NavigateTo("/auth");
    }

    public void Dispose()
    {
        // Dispose of resources here
    }
}
