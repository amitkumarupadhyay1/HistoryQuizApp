@page "/quiz-result/{QuizId:int}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using HistoryQuizApp.Data
@inject QuizService QuizService

@code {
    [Parameter] public int QuizId { get; set; }
    private int score = 0;
    private HistoryQuizApp.Data.Quiz quiz;
    private Dictionary<int, string> userAnswers = new Dictionary<int, string>();

    protected override async Task OnInitializedAsync()
    {
        // Load the quiz and user score
        quiz = await QuizService.GetQuizByIdAsync(QuizId);
        score = await QuizService.GetUserScoreAsync("a", QuizId); // Assuming user ID "a" for now
                                                                  // Retrieve user answers
        userAnswers = await QuizService.GetUserAnswersAsync("a", QuizId);
    }
}

<div>
    <h3>Your Score: @score</h3>

    @if (quiz != null)
    {
        <h4>@quiz.Title</h4>
        <ul>
            @foreach (var question in quiz.Questions)
            {
                <li>
                    <strong>@question.Text</strong>
                    <br />
                    <span style="color: green; font-weight: bold;">Correct Answer: @GetCorrectAnswer(question)</span>
                    <br />
                    @if (userAnswers.ContainsKey(question.Id))
                    {
                        <span style="color: red;">Your Answer: @userAnswers[question.Id]</span>
                        @if (IsAnswerCorrect(question, userAnswers[question.Id]))
                        {
                            <span style="color: green;"> (Correct!)</span>
                        }
                        else
                        {
                            <span style="color: red;"> (Incorrect)</span>
                        }
                    }
                    else
                    {
                        <span style="color: gray;">No answer provided.</span>
                    }
                </li>
            }
        </ul>
    }
    <a href="/">Return to Home</a>
</div>

@code {
    private string GetCorrectAnswer(Question question)
    {
        var correctOptions = question.Options
            .Where((option, index) => question.CorrectAnswers[index])
            .ToList();

        return string.Join(", ", correctOptions);
    }

    private bool IsAnswerCorrect(Question question, string userAnswer)
    {
        var correctOptions = question.Options
            .Where((option, index) => question.CorrectAnswers[index])
            .ToHashSet();

        return correctOptions.Contains(userAnswer);
    }
}
